"""Rename created_at -> timestamp with alias

Revision ID: e191ce7cd1bd
Revises: 26183e748970
Create Date: 2025-09-11 16:28:10.528656

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect as sa_inspect

# revision identifiers, used by Alembic.
revision = 'e191ce7cd1bd'
down_revision = '26183e748970'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # safe-drop: only drop temp table if it actually exists in the DB
    conn = op.get_bind()
    inspector = sa_inspect(conn)
    if '_alembic_tmp_payment_audits' in inspector.get_table_names():
        op.drop_table('_alembic_tmp_payment_audits')

    with op.batch_alter_table('payment_audits', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_payment_audits_borrower_id'), ['borrower_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_payment_audits_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_payment_audits_group_id'), ['group_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_payment_audits_loan_id'), ['loan_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_payment_audits_payer_id'), ['payer_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_payment_audits_payment_id'), ['payment_id'], unique=False)

        # use explicit FK names (these match the names used later in create_table)
        batch_op.create_foreign_key(
            op.f('fk_payment_audits_loan_id'),
            'loans',
            ['loan_id'],
            ['id']
        )
        batch_op.create_foreign_key(
            op.f('fk_payment_audits_payer_id'),
            'users',
            ['payer_id'],
            ['id']
        )
        batch_op.create_foreign_key(
            op.f('fk_payment_audits_group_id'),
            'cooperative_groups',
            ['group_id'],
            ['id']
        )
        batch_op.create_foreign_key(
            op.f('fk_payment_audits_borrower_id'),
            'users',
            ['borrower_id'],
            ['id']
        )

        batch_op.drop_column('raw_metadata')

    with op.batch_alter_table('repayments', schema=None) as batch_op:
        # Only drop the FK that actually has a name in the DB.
        # We found 'fk_repayments_loan_id_loans' present on the DB; drop that explicitly if intended.
        # If you intended to drop unnamed constraints (name is None in DB), handle via table recreate.
        batch_op.drop_constraint(op.f('fk_repayments_loan_id_loans'), type_='foreignkey')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('repayments', schema=None) as batch_op:
        # recreate the FK with explicit name (matches the one we dropped above)
        batch_op.create_foreign_key(op.f('fk_repayments_loan_id_loans'), 'loan_requests', ['loan_id'], ['id'])

    with op.batch_alter_table('payment_audits', schema=None) as batch_op:
        batch_op.add_column(sa.Column('raw_metadata', sa.TEXT(), nullable=True))

        batch_op.drop_constraint(op.f('fk_payment_audits_borrower_id'), type_='foreignkey')
        batch_op.drop_constraint(op.f('fk_payment_audits_group_id'), type_='foreignkey')
        batch_op.drop_constraint(op.f('fk_payment_audits_loan_id'), type_='foreignkey')
        batch_op.drop_constraint(op.f('fk_payment_audits_payer_id'), type_='foreignkey')

        batch_op.drop_index(batch_op.f('ix_payment_audits_payment_id'))
        batch_op.drop_index(batch_op.f('ix_payment_audits_payer_id'))
        batch_op.drop_index(batch_op.f('ix_payment_audits_loan_id'))
        batch_op.drop_index(batch_op.f('ix_payment_audits_group_id'))
        batch_op.drop_index(batch_op.f('ix_payment_audits_created_at'))
        batch_op.drop_index(batch_op.f('ix_payment_audits_borrower_id'))

    op.create_table('_alembic_tmp_payment_audits',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('payment_id', sa.INTEGER(), nullable=True),
        sa.Column('group_id', sa.INTEGER(), nullable=True),
        sa.Column('loan_id', sa.INTEGER(), nullable=True),
        sa.Column('payer_id', sa.INTEGER(), nullable=True),
        sa.Column('borrower_id', sa.INTEGER(), nullable=True),
        sa.Column('amount', sa.NUMERIC(precision=18, scale=2), nullable=False),
        sa.Column('applied_amount', sa.NUMERIC(precision=18, scale=2), nullable=True),
        sa.Column('status', sa.VARCHAR(length=40), nullable=False),
        sa.Column('reason', sa.VARCHAR(length=255), nullable=True),
        sa.Column('created_at', sa.DATETIME(), nullable=False),
        sa.Column('metadata', sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(['borrower_id'], ['users.id'], name=op.f('fk_payment_audits_borrower_id')),
        sa.ForeignKeyConstraint(['group_id'], ['cooperative_groups.id'], name=op.f('fk_payment_audits_group_id')),
        sa.ForeignKeyConstraint(['loan_id'], ['loans.id'], name=op.f('fk_payment_audits_loan_id')),
        sa.ForeignKeyConstraint(['payer_id'], ['users.id'], name=op.f('fk_payment_audits_payer_id')),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
