"""Add Hedera file fields to KYCRequest

Revision ID: e6346fbcf6e4
Revises: e191ce7cd1bd
Create Date: 2025-09-11 17:10:06.691746

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect as sa_inspect

# revision identifiers, used by Alembic.
revision = 'e6346fbcf6e4'
down_revision = 'e191ce7cd1bd'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa_inspect(conn)

    # 1) Add columns to kyc_requests only if they don't already exist
    existing_cols = [c['name'] for c in inspector.get_columns('kyc_requests')]
    if 'hedera_file_id' not in existing_cols or 'hedera_file_hash' not in existing_cols:
        with op.batch_alter_table('kyc_requests', schema=None) as batch_op:
            if 'hedera_file_id' not in existing_cols:
                batch_op.add_column(sa.Column('hedera_file_id', sa.String(length=100), nullable=True))
            if 'hedera_file_hash' not in existing_cols:
                batch_op.add_column(sa.Column('hedera_file_hash', sa.String(length=200), nullable=True))

    # 2) For repayments: drop only named FKs that refer to something other than 'loans', then create an explicit FK to 'loans'.
    fks = inspector.get_foreign_keys('repayments')
    named_to_drop = [fk['name'] for fk in fks if fk.get('name') and fk.get('referred_table') != 'loans']

    with op.batch_alter_table('repayments', schema=None) as batch_op:
        for fk_name in named_to_drop:
            batch_op.drop_constraint(fk_name, type_='foreignkey')

        # create an explicit FK to loans with a stable name if it doesn't already exist
        fk_names_after = [fk.get('name') for fk in inspector.get_foreign_keys('repayments')]
        if op.f('fk_repayments_loan_id') not in fk_names_after:
            batch_op.create_foreign_key(
                op.f('fk_repayments_loan_id'),
                'loans',
                ['loan_id'],
                ['id']
            )

    # Note: unnamed constraints (fk['name'] is None) are left untouched. See notes in migration file.
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa_inspect(conn)

    # If the explicit FK exists, drop it and recreate a FK pointing to loan_requests (best effort).
    fks = inspector.get_foreign_keys('repayments')
    fk_names = [fk.get('name') for fk in fks]

    with op.batch_alter_table('repayments', schema=None) as batch_op:
        if op.f('fk_repayments_loan_id') in fk_names:
            batch_op.drop_constraint(op.f('fk_repayments_loan_id'), type_='foreignkey')

        batch_op.create_foreign_key(
            op.f('fk_repayments_loan_id_loan_requests'),
            'loan_requests',
            ['loan_id'],
            ['id']
        )

    # remove added columns from kyc_requests if they exist
    existing_cols = [c['name'] for c in inspector.get_columns('kyc_requests')]
    with op.batch_alter_table('kyc_requests', schema=None) as batch_op:
        if 'hedera_file_hash' in existing_cols:
            batch_op.drop_column('hedera_file_hash')
        if 'hedera_file_id' in existing_cols:
            batch_op.drop_column('hedera_file_id')
    # ### end Alembic commands ###
